{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Copy of USJT-2020-LINGPROG-aula03-pratica- ifs e loops.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.6.4"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "maM3_i4UGauC",
        "colab_type": "text"
      },
      "source": [
        "![logo_usjt.png](https://www.usjt.br/app/themes/mobister/dist/images/sao-judas-universidade.png)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FpSlyhPeGauH",
        "colab_type": "text"
      },
      "source": [
        "# Paradigmas de Linguagens de Programação\n",
       
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lrqSr0WQGauJ",
        "colab_type": "text"
      },
      "source": [
        "# Atividade03 - Python Básico - Ifs, Loops e Arquivos\n",
        "\n",
        "**Conteúdo:**\n",
        "- comparações, condicionais\n",
        "- laços for e while\n",
        "- arquivos"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Fc9CDg0xGauK",
        "colab_type": "text"
      },
      "source": [
        "## Autor\n",
        "- **Aluno:**\n",
        "\n",
        "Obs: as tarefas devem ser individuais."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qVw0n2CVGauL",
        "colab_type": "text"
      },
      "source": [
        "## Exercícios"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dvhVcyBwGauN",
        "colab_type": "text"
      },
      "source": [
        "**1** Faça um programa para a leitura de duas notas parciais de um aluno. O programa deve calcular a média alcançada por aluno e apresentar:\n",
        "- A mensagem \"Aprovado\", se a média alcançada for maior ou igual a sete;\n",
        "- A mensagem \"Reprovado\", se a média for menor do que sete;\n",
        "- A mensagem \"Aprovado com Distinção\", se a média for igual a dez."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "G5YBtQy0GauO",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#solução"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pZJ3BiU7Gm8t",
        "colab_type": "code",
        "outputId": "61a979c6-8655-4e19-c8c7-986be7744a08",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 50
        }
      },
      "source": [
        "nota1 = 10\n",
        "nota2 = 10\n",
        "\n",
        "media = (nota1 + nota2) / 2\n",
        "\n",
        "\n",
        "if media == 10:\n",
        "  print(\"Aprovado com distinção\")\n",
        "elif media >= 7 :\n",
        "  print(\"Aprovado!\")\n",
        "else:\n",
        "  print(\"Reprovado\")\n",
        "\n",
        "print(media)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Aprovado com distinção\n",
            "10.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YtYlxtP5GauS",
        "colab_type": "text"
      },
      "source": [
        "**2** Faça um programa que leia três números e mostre-os em ordem decrescente."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-P7L_jtpGauT",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#solução"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "G2JtoxcDJJoN",
        "colab_type": "code",
        "outputId": "7425542d-560e-4f61-9adf-603469124108",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "numeros = [20, 5, 19 , 32, 15]\n",
        "numeros.sort(reverse=True)\n",
        "print(numeros)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[32, 20, 19, 15, 5]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sKS6ST1yGauY",
        "colab_type": "text"
      },
      "source": [
        "**3** As Organizações Tabajara resolveram dar um aumento de salário aos seus colaboradores e lhe contrataram para desenvolver o programa que calculará os reajustes.\n",
        "\n",
        "Faça um programa que recebe o salário de um colaborador e o reajuste segundo o seguinte critério, baseado no salário atual:\n",
        "- salários até R\\$ 280,00 (incluindo) : aumento de 20%\n",
        "- salários entre R\\$ 280,00 e R\\$ 700,00 : aumento de 15%\n",
        "- salários entre R\\$ 700,00 e R\\$ 1500,00 : aumento de 10%\n",
        "- salários de R\\$ 1500,00 em diante : aumento de 5% \n",
        "\n",
        "Após o aumento ser realizado, informe na tela:\n",
        "- o salário antes do reajuste;\n",
        "- o percentual de aumento aplicado;\n",
        "- o valor do aumento;\n",
        "- o novo salário, após o aumento."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fgEhxPQ6GauZ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#solução"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VqBz99RTGRCR",
        "colab_type": "code",
        "outputId": "ece8b755-916b-4cb3-f539-4f7d6ab70d64",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 87
        }
      },
      "source": [
        " salario = 1600\n",
        "\n",
        " if(salario <= 280):\n",
        "     print('salario antes do reajuste {}'.format(salario))\n",
        "     salario = salario * 1.2\n",
        "     print('aplicou 20 porcento de aumento')\n",
        "     print('salario após reajuste {}'.format(salario))\n",
        "     print('o novo salario eh de: {}'.format(salario))\n",
        "     print(salario)\n",
        " elif(salario > 280 and salario <= 700):\n",
        "     print('salario antes do reajuste {}'.format(salario))\n",
        "     salario = salario * 1.15\n",
        "     print('aplicou 15 porcento de aumento')\n",
        "     print('salario após reajuste {}'.format(salario))\n",
        "     print('o novo salario eh de: {}'.format(salario))\n",
        "\n",
        " elif(salario > 700 and salario <= 1500):\n",
        "     print('salario antes do reajuste {}'.format(salario))\n",
        "     salario = salario * 1.1\n",
        "     print('aplicou 10 porcento de aumento')\n",
        "     print('salario após reajuste {}'.format(salario))\n",
        "     print('o novo salario eh de: {}'.format(salario))\n",
        " else:\n",
        "     print('salario antes do reajuste {}'.format(salario))\n",
        "     salario = salario * 1.05\n",
        "     print('aplicou 5 porcento de aumento')\n",
        "     print('salario após reajuste {}'.format(salario))\n",
        "     print('o novo salario eh de: {}'.format(salario))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "salario antes do reajuste 1600\n",
            "aplicou 5 porcento de aumento\n",
            "salario após reajuste 1680.0\n",
            "o novo salario É de: 1680.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CtTMTQMCGauc",
        "colab_type": "text"
      },
      "source": [
        "**4** Faça um Programa que leia um número e exiba o dia correspondente da semana. (1-Domingo, 2- Segunda, etc.), se digitar outro valor deve aparecer valor inválido."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "B10UGAFrGaud",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#solução"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ts9UN6xAMU0T",
        "colab_type": "code",
        "outputId": "e704c308-2f49-4095-e049-37bcd3c69934",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "dia = 5\n",
        "\n",
        "if dia == 1: \n",
        "  print(\"Domingo\")\n",
        "elif dia == 2:\n",
        "  print(\"Segunda\")\n",
        "elif dia == 3:\n",
        "  print(\"Terça\")\n",
        "elif dia == 4:\n",
        "  print(\"Quarta\")\n",
        "elif dia == 5:\n",
        "  print(\"Quinta\")\n",
        "elif dia == 6:\n",
        "  print(\"Sexta\")\n",
        "elif dia == 7:\n",
        "  print(\"Sabado\")\n",
        "else:\n",
        "  print(\"Esse numero não é um dia da semana\")"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Quinta\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fu66rd5VGaui",
        "colab_type": "text"
      },
      "source": [
        "**5** Faça um Programa que peça os 3 lados de um triângulo. O programa deverá informar se os valores podem ser um triângulo. Indique, caso os lados formem um triângulo, se o mesmo é: equilátero, isósceles ou escaleno.\n",
        "\n",
        "Dicas:\n",
        "- Três lados formam um triângulo quando a soma de quaisquer dois lados for maior que o terceiro;\n",
        "- Triângulo Equilátero: três lados iguais;\n",
        "- Triângulo Isósceles: quaisquer dois lados iguais;\n",
        "- Triângulo Escaleno: três lados diferentes;\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JoaJ2SSWGauj",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#solução"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sy0qbdFXHO5d",
        "colab_type": "code",
        "outputId": "7af4e8b4-68ae-41ed-992c-b95927007ba0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "triangulo = 5 \n",
        "triangulo2 = 3\n",
        "triangulo3 = 7\n",
        "\n",
        "if (triangulo == triangulo2 and triangulo == triangulo3):\n",
        "  print(\"Triangulo equilatero\")\n",
        "elif (triangulo == triangulo2 and triangulo != triangulo3 or triangulo == triangulo3 and triangulo !=triangulo2 or triangulo2 != triangulo3 and triangulo2 == triangulo or triangulo3 == triangulo ):\n",
        "  print(\"Triangulo isoceles\")\n",
        "else:\n",
        "  print(\"Triangulo escaleno\")\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Triangulo escaleno\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "B52COgyaGauo",
        "colab_type": "text"
      },
      "source": [
        "**6** Faça um programa que calcule as raízes de uma equação do segundo grau, na forma `ax2 + bx + c`. O programa deverá pedir os valores de `a`, `b` e `c` e fazer as consistências, informando ao usuário nas seguintes situações:\n",
        "\n",
        "- Se o usuário informar o valor de A igual a zero, a equação não é do segundo grau e o programa não deve fazer pedir os demais valores, sendo encerrado;\n",
        "- Se o delta calculado for negativo, a equação não possui raizes reais. Informe ao usuário e encerre o programa;\n",
        "- Se o delta calculado for igual a zero a equação possui apenas uma raiz real; informe-a ao usuário;\n",
        "- Se o delta for positivo, a equação possui duas raiz reais; informe-as ao usuário."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "n-M3RDGbGaup",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#solução"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jUGOwpgoLjR0",
        "colab_type": "code",
        "outputId": "b10d9497-d3bb-4ab6-e2b2-087748969296",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 54
        }
      },
      "source": [
        "import math \n",
        "\n",
        "a = 1\n",
        "b = 10\n",
        "c = 2\n",
        "\n",
        "delta = (b * b) - (4 * a * c)\n",
        "\n",
        "if (a == 0):\n",
        "  print(\"O programa foi encerrado\")\n",
        "elif (delta < 0):\n",
        "  print(\"O delta é negativo, a equação não possui raiz\")\n",
        "elif (delta == 0):\n",
        "  x = - b / (2 * a)\n",
        "  print(\"Possui uma raiz real\", x)\n",
        "elif (delta > 0 ):\n",
        "  raizDelta = math.sqrt(delta)\n",
        "  x1 = (-b + raizDelta) / (2 * a)\n",
        "  x2 = (-b - raizDelta) / (2 * a)\n",
        "  print(x1)\n",
        "  print(x2)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "-0.2041684766872809\n",
            "-9.79583152331272\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "by2QqoOyGaut",
        "colab_type": "text"
      },
      "source": [
        "**7** Faça um programa que faça 5 perguntas para uma pessoa sobre um crime. As perguntas são:\n",
        "- \"Telefonou para a vítima?\"\n",
        "- \"Esteve no local do crime?\"\n",
        "- \"Mora perto da vítima?\"\n",
        "- \"Devia para a vítima?\"\n",
        "- \"Já trabalhou com a vítima?\" \n",
        "\n",
        "O programa deve no final emitir uma classificação sobre a participação da pessoa no crime. Se a pessoa responder positivamente a 2 questões ela deve ser classificada como \"Suspeita\", entre 3 e 4 como \"Cúmplice\" e 5 como \"Assassino\". Caso contrário, ele será classificado como \"Inocente\"."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0xS7R6XjGauv",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#solução"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6BDfl9ndRaDT",
        "colab_type": "code",
        "outputId": "7502994a-1bea-4dce-fc6e-8b63b28507f0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 126
        }
      },
      "source": [
        "pontuacao = 0\n",
        "pergunta1 = input(\"Telefonou para a vítima?\")\n",
        "pergunta2 = input(\"Esteve no local do crime?\")\n",
        "pergunta3 = input(\"Mora perto da vítima?\")\n",
        "pergunta4 = input(\"Devia para a vítima?\")\n",
        "pergunta5 = input(\"Já trabalhou com a vítima?\")\n",
        "\n",
        "if (pergunta1 == \"Sim\"): \n",
        "  pontuacao = pontuacao + 1\n",
        "if (pergunta2 == \"Sim\"): \n",
        "  pontuacao = pontuacao + 1 \n",
        "if (pergunta3 == \"Sim\"): \n",
        "  pontuacao = pontuacao + 1 \n",
        "if (pergunta4 == \"Sim\"): \n",
        "  pontuacao = pontuacao + 1 \n",
        "if (pergunta5 == \"Sim\"): \n",
        "  pontuacao = pontuacao + 1\n",
        "\n",
        "if (pontuacao == 2): \n",
        "  print(\"Suspeita\")\n",
        "elif (pontuacao == 3 or pontuacao == 4):\n",
        "  print(\"Cumplice\")\n",
        "elif (pontuacao == 5):\n",
        "  print(\"Assassino\")\n",
        "else:\n",
        "  print(\"Inocente\") "
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Telefonou para a vítima?Sim\n",
            "Esteve no local do crime?Sim\n",
            "Mora perto da vítima?Sim\n",
            "Devia para a vítima?Sim\n",
            "Já trabalhou com a vítima?Sim\n",
            "Assassino\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TQBL8oZcGauy",
        "colab_type": "text"
      },
      "source": [
        "**8** Faça um programa que peça uma nota, entre zero e dez. Mostre uma mensagem caso o valor seja inválido e continue pedindo até que o usuário informe um valor válido."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-O3e5YZpGau0",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#solução"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zsZstTGDErF1",
        "colab_type": "code",
        "outputId": "e0befb11-74ec-45d7-c952-a6d968fcb1a5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 54
        }
      },
      "source": [
        "message = True\n",
        "\n",
        "while (message):\n",
        "  valor = input(\"Digite um numero\")\n",
        "  try:\n",
        "    valor = int(valor)\n",
        "    if (valor >= 0 and valor <= 10):\n",
        "      print(\"Valor valido\")\n",
        "      message = False\n",
        "    else:\n",
        "      print(\"valor invalido\")\n",
        "  except:\n",
        "    message = True\n",
        "    print(\"Valor invalido\")"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Digite um numero5\n",
            "Valor valido\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zTbYwx2IGau3",
        "colab_type": "text"
      },
      "source": [
        "\n",
        "**9** Faça um programa que leia 5 números e informe a soma e a média dos números."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "h4Gb4YAPGau4",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#solução"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HD_BbDJULB3q",
        "colab_type": "code",
        "outputId": "1e2d8aaf-3887-4f9c-8a62-139021d58922",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        }
      },
      "source": [
        "n1 = 1\n",
        "n2 = 2\n",
        "n3 = 3\n",
        "n4 = 4\n",
        "n5 = 5\n",
        "\n",
        "soma = n1 + n2 + n3 + n4 + n5\n",
        "\n",
        "media = soma/5\n",
        "\n",
        "print('a soma eh: {}'.format(soma))\n",
        "print('a media eh: {}'.format(media))\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "a soma eh: 15\n",
            "a media eh: 3.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "awggDYg4Gau7",
        "colab_type": "text"
      },
      "source": [
        "**10** Faça um programa que imprima na tela apenas os números ímpares entre 1 e 50."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0VhAqUsGGau7",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#solução"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "M9fcZKh5MP0U",
        "colab_type": "code",
        "outputId": "6423fbd9-2d69-4d9c-8927-515bd3416307",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 478
        }
      },
      "source": [
        "numero = 50\n",
        "\n",
        "for n in range(0, 50):  \n",
        "  if( n % 2 == 1):\n",
        "    print(n)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1\n",
            "3\n",
            "5\n",
            "7\n",
            "9\n",
            "11\n",
            "13\n",
            "15\n",
            "17\n",
            "19\n",
            "21\n",
            "23\n",
            "25\n",
            "27\n",
            "29\n",
            "31\n",
            "33\n",
            "35\n",
            "37\n",
            "39\n",
            "41\n",
            "43\n",
            "45\n",
            "47\n",
            "49\n",
            "ERROR! Session/line number was not unique in database. History logging moved to new session 59\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PDZO5NcSGau-",
        "colab_type": "text"
      },
      "source": [
        "**11** Desenvolva um gerador de tabuada, capaz de gerar a tabuada de qualquer número inteiro entre 1 a 10. O usuário deve informar de qual numero ele deseja ver a tabuada. A saída deve ser conforme o exemplo abaixo:\n",
        "\n",
        "`\n",
        "Tabuada do 5:\n",
        "5 X 1 = 5\n",
        "5 X 2 = 10\n",
        "...\n",
        "5 X 10 = 50\n",
        "`"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Viay0A6VFiS_",
        "colab_type": "text"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "C0rnySF0GavA",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#solução"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "t_JfHcTMMgLv",
        "colab_type": "code",
        "outputId": "67911ffc-24eb-49c3-dca4-31c9c29a84c4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 194
        }
      },
      "source": [
        "numero = 6\n",
        "\n",
        "\n",
        "result  = numero * 1\n",
        "result2 = numero * 2\n",
        "result3 = numero * 3\n",
        "result4 = numero * 4\n",
        "result5 = numero * 5\n",
        "result6 = numero * 6\n",
        "result7 = numero * 7\n",
        "result8 = numero * 8\n",
        "result9 = numero * 9\n",
        "result10 = numero * 10\n",
        "\n",
        "print('{} x 1 = {}'.format(numero, result))\n",
        "print('{} x 2 = {}'.format(numero, result2))\n",
        "print('{} x 3 = {}'.format(numero, result3))\n",
        "print('{} x 4 = {}'.format(numero, result4))\n",
        "print('{} x 5 = {}'.format(numero ,result5))\n",
        "print('{} x 6 = {}'.format(numero, result6))\n",
        "print('{} x 7 = {}'.format(numero, result7))\n",
        "print('{} x 8 = {}'.format(numero, result8))\n",
        "print('{} x 9 = {}'.format(numero, result9))\n",
        "print('{} x 10 = {}'.format(numero,result10))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "6 x 1 = 6\n",
            "6 x 2 = 12\n",
            "6 x 3 = 18\n",
            "6 x 4 = 24\n",
            "6 x 5 = 30\n",
            "6 x 6 = 36\n",
            "6 x 7 = 42\n",
            "6 x 8 = 48\n",
            "6 x 9 = 54\n",
            "6 x 10 = 60\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GyO4LYWSGavD",
        "colab_type": "text"
      },
      "source": [
        "**12** A série de Fibonacci é formada pela seqüência 1,1,2,3,5,8,13,21,34,55,... Faça um programa capaz de gerar a série até o n−ésimo termo."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1mA2QTgLGavE",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#solução"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5BlSeumRMwkh",
        "colab_type": "code",
        "outputId": "bc9ca011-5f7b-4a81-f637-d3720df9d8ed",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 141
        }
      },
      "source": [
        "def fib2(n):\n",
        "   a = 0\n",
        "   b = 1\n",
        "   print(a)\n",
        "   while (b < n):\n",
        "       c = a\n",
        "       a = b\n",
        "       b = a + c\n",
        "       print(a)\n",
        "\n",
        "fib2(10)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0\n",
            "1\n",
            "1\n",
            "2\n",
            "3\n",
            "5\n",
            "8\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "H00S4zTiGavI",
        "colab_type": "text"
      },
      "source": [
        "**13** Faça um programa que calcule o fatorial de um número inteiro fornecido pelo usuário. Ex.: 5!=5.4.3.2.1=120"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Hf5vE6kTGavJ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#solução"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iaIeIv0XM7iM",
        "colab_type": "code",
        "outputId": "4bfb6464-39b9-4d25-db73-40cf45293805",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        }
      },
      "source": [
        "numero = int(input(\"Fatorial de: \") )\n",
        "\n",
        "resultado=1\n",
        "count=1\n",
        "\n",
        "while count <= numero:\n",
        "   resultado *= count\n",
        "   count += 1\n",
        "\n",
        "print(resultado)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Fatorial de: 6\n",
            "720\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8JS54E8EGavM",
        "colab_type": "text"
      },
      "source": [
        "**14** Faça um programa que receba o valor de uma dívida e mostre uma tabela com os seguintes dados: valor da dívida, valor dos juros, quantidade de parcelas e valor da parcela.\n",
        "\n",
        "Os juros e a quantidade de parcelas seguem a tabela abaixo:\n",
        "\n",
        "|Quantidade de Parcelas|% de Juros sobre o valor inicial da dívida|\n",
        "|:-|:-|\n",
        "|1       |0\n",
        "|3       |10\n",
        "|6       |15\n",
        "|9       |20\n",
        "|12      |25\n",
        "\n",
        "Exemplo de saída do programa:\n",
        "\n",
        "|Valor da Dívida|Valor dos Juros|Quantidade de Parcelas|Valor da Parcela|\n",
        "|:-|:-|:-|:-|\n",
        "|1.000,00|0|1|1.000,00\n",
        "|1.100,00|100|3|366,00\n",
        "|1.150,00|150|6|191,67\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8vMlHRSkGavO",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#solução"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sIk_PxlJNEmV",
        "colab_type": "code",
        "outputId": "6b52c0d3-3ce3-4268-fa3e-ba26806a0ccd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 141
        }
      },
      "source": [
        " valor_divida = 1000\n",
        "\n",
        "juros0  = valor_divida * 1\n",
        "juros10 = valor_divida * 1.1\n",
        "juros15 =  valor_divida * 1.15\n",
        "juros20 = valor_divida * 1.2\n",
        "juros25 = valor_divida * 1.25\n",
        "\n",
        "\n",
        "print('Valor da Divida    Valor dos Juros   Quantidade de parcelas   Valor da Parcela')\n",
        "print('________________________________________________________________________________')\n",
        "print('    {}              {}            {}            {}'.format(juros0,juros0, 1, juros0/1))\n",
        "print('    {}            {}           {}            {}'.format(juros10,juros10 - valor_divida, 3, juros10/3))\n",
        "print('    {}            {}           {}            {}'.format(juros15,juros15 - valor_divida, 6, juros15/6))\n",
        "print('    {}            {}           {}            {}'.format(juros20,juros20 - valor_divida, 9, juros20/9))\n",
        "print('    {}            {}          {}            {}'.format(juros25,juros25 - valor_divida, 12, juros25/12))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Valor da Divida    Valor dos Juros   Quantidade de parcelas   Valor da Parcela\n",
            "________________________________________________________________________________\n",
            "    1000              1000            1            1000.0\n",
            "    1100.0            100.0           3            366.6666666666667\n",
            "    1150.0            150.0           6            191.66666666666666\n",
            "    1200.0            200.0           9            133.33333333333334\n",
            "    1250.0            250.0          12            104.16666666666667\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "g6_WKYHTGavS",
        "colab_type": "text"
      },
      "source": [
        "**15** A ACME Inc., uma empresa de 500 funcionários, está tendo problemas de espaço em disco no seu servidor de arquivos. Para tentar resolver este problema, o Administrador de Rede precisa saber qual o espaço ocupado pelos usuários, e identificar os usuários com maior espaço ocupado. Através de um programa, baixado da Internet, ele conseguiu gerar o seguinte arquivo, chamado \"usuarios.txt\":\n",
        "\n",
        "```\n",
        "alexandre       456123789\n",
        "anderson        1245698456\n",
        "antonio         123456456\n",
        "carlos          91257581\n",
        "cesar           987458\n",
        "rosemary        789456125\n",
        "```\n",
        "\n",
        "Neste arquivo, o nome do usuário possui 15 caracteres. A partir deste arquivo, você deve criar um programa que gere um relatório, chamado \"relatório.txt\", no seguinte formato:\n",
        "\n",
        "```\n",
        "ACME Inc.   Uso do espaço em disco pelos usuários\n",
        "-------------------------------------------------\n",
        "Nr.  Usuário        Espaço utilizado     % do uso\n",
        "---- -------------- ---------------- ------------\n",
        "1    alexandre             434,99 MB       16,85%\n",
        "2    anderson             1187,99 MB       46,02%\n",
        "3    antonio               117,73 MB        4,56%\n",
        "4    carlos                 87,03 MB        3,37%\n",
        "5    cesar                   0,94 MB        0,04%\n",
        "6    rosemary              752,88 MB       29,16%\n",
        "\n",
        "Espaço total ocupado: 2581,57 MB\n",
        "Espaço médio ocupado: 430,26 MB\n",
        "```\n",
        "\n",
        "\n",
        "O arquivo de entrada deve ser lido uma única vez, e os dados armazenados em memória, caso sejam necessários, de forma a agilizar a execução do programa. A conversão da espaço ocupado em disco, de bytes para megabytes deverá ser feita através de uma função separada, que será chamada pelo programa principal. O cálculo do percentual de uso também deverá ser feito através de uma função, que será chamada pelo programa principal.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bfxZnFbhGavT",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#solução"
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}